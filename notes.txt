1> str(string):
    it can store data in string form. eg- name = "avi pandey"
    it can store the numeric data. eg- age = "18"
    it can store the decimal no. eg-precentage = "85.9"
    
    typecasting
    to convet one datatype to another datatype
    eg.
       something we need to purchase in float we paid in integer
       code{
       purchaseItemPrice = 90.82
       paidItemsPrice = int(purchaseItemPrice)
       print("paid amount is", paidItemsPrice)
       }
       2> to get the input from using input() function
       code
       {
        collegeName = input("enter your college name")
        collegeFee = int(input("enter your college fee"))
        print("My college name is "+collegeName+ collegeFee)
               }
        the input function has defualt return type str
        code{
            collegefee=collegeFee-25000
            print("After scholarship my fees",collegeFee)
        }
        question 1>
        Find the age of in year when bornYear and currentYear given by user

CONDITIONAL STATMENT

it will check that the conditional isn true or not
to check condition we use 'if' and 'else'.

LOOPS 

For loop is used to no. of itetration 
code
{
username="Avi Pandey"
for x in username:
print(x)
}

WHILE LOOPS

while loop is used to preform itetration
until the condition will be false
FUNCTION 
function can perform any task, it can be reused, it will return the result
code{
    def printName():
        print("Enter your name")
    printName()
}

LIST 

it can store multiple data, data can be different type like int, str....
list can store dublicate data set - shorting assending decending

create a list and store the your friends name 
CODE
{
    firendlist = ["frnd1", "frnd2", "frnd3"]
    #print the list of friendname
    print(friendlist)
    friendlist.append("frnd4")
    print(friendlist)
    
}
add the data into list using index no
friendlist.insert(0, "Avi")
print(friendlist)
to access the data using index no 
print(friendlist[2])

list in  python 
list store multiple data 
myList = ["frnd1","frnd2" , "frnd3"]

tuple store multiple data 
myTuple = ("frnd1","frnd2" , "frnd3")

set store multilpe data 
mySet = {"frnd1","frnd2" , "frnd3"}

disctionary store multiple data in key value pair 
myDict={"Name": "Kshitij","Email": "p@gmail.com"}

To check the data type of all above data set
print("List:",type(mylist),"Tuple",type(myTuple))
print("Set:",type (myset),"Dict:",type(myDict))
#how to Idetify list set tuple and dictionary

#list [],Tuple(), set{},dict{:}

#Example of data set

myset={"Pawan","Kshitij","Harshit"}
mytuple=("Pawan","Kshitij","Harshit")
myList=["Pawan","Kshitij","Harshit"]
mydict ={"Name":"Kshitij","age":20}

ACCESS FROM DATA SET 
print("list:", myList[0], "set:", myset)
print("tuple:", mytuple[0], "dict:", mydict["Name"] )

ACCESS COMPLETE DATA FROM SET
for x in myList:
    print("list", x)
for x in mytuple:
    print("tuple", x)
for x in myList:
    print("set", x)
for x in mydict.values:
    print("dict", x)
-->>Only truple and list can takes duplicate values
-->>LIST, DICTONARY CAN BE UPDATED 
-->>TUPLE, SET IS UNCHANGABLE 
myList[0] = "avi"
print(myList)
mydict["NAME"] = "avi"
print(mydict)
 
 ADD NEW VALUE IN DATA SET 

myList.append("PANDEY")
myset.add("PANDEY")
mydict.update({"Name":"PANDEY"})

TO REMOVE THE DATA FROM  DATA SET 

mydict.pop("Name")
myList.pop(0)
myset.remove("PANDEY")

TO CONVET TUPLE IN LIST 

convertlist = list(mytuple)
print(type(convertlist))
convertlist.append("avishkar")
print(convertlist)
convertlist.pop(2)
print(convertlist)
qwe=tuple(convertlist)
print(type(qwe))
--------------------------------------------------
--------------------------------------------------
FILE HANDLING 
Work on the file

CREATE FILE 
syntax 
variableName = open("filename", "filenode")
eg-
mylaptopPassword=open("psssword.txt", "w")

WRITE FILE

syntax
variableName.write("contant")
eg-
mylaptopPassword.write("avishkar")

READ FROM FILE 
-->to read a file you need to open the file in reading mode
syntax
variableName.read()
eg- 
mylaptopPassword.read()

DELETE FILE
-->to delete a file you need to close the file first
syntax
mypassword.close()
import os
os.remove("filename.extemion")
eg-
import os
os.remove("password.txt")
--------------------------------------------
#to  create a file 
mypassword = open("firstname.txt", "w")
#to write in the file
mypassword.write("my name = avi")
mypassword.write(input("enter a new password"))
# read a file
mypassword = open("firstname.txt", "r")
print(mypassword.read())
#delete a file
mypassword.close()
import os
os.remove("firstname.txt")
----------------------------------------------
----------------------------------------------
ERROR HANDLING OR EXPECTION HANDLING

CONTROL OVER THE ERROR IN PROGRAM 
#1Name Error

#print(x)

#solution 
try :
    print(x)
except NameError:
    print("x is not defined")
-------------------------------------------
# 2 ZeroDivisionError

# y = 1/0

 try: 
     y = 1/0
 except ZeroDivisionError:
     print("divide by zero error")
---------------------------------------
#3 ValueError

name = "avishkar"
# num = int(name)

try:
    num = int(name)
except ValueError:
    print("A string cannot be converted into integer")
---------------------------------------------------------------
#4 IndexError
friends = ["frnd1", "frnd2","frnd3"]
# friends[4]

try:
    friends[4]
except IndexError:
    print("You are calling wring index")
-----------------------------------------------------------
#5 TypeError

amount = 400
email = "p@mail.com"
#total = amount + email

try:
    total = amount + email
except TypeError:
    print("String cannot be concatenated with integer")
------------------------------------------------------------
------------------------------------------------------------
OOPS IN PYTHON 
Object oriented programming structure
CLASS- it os a container which collection variables, functions
Example--> avi CLASS
avi.fullname = "avishkarpandey"
avi.age = 19
avi.sleeping()
avi.eating()
avi.watching()
CLASS syntax:
class ClassName:
    statement
ex-
class ClassName:
    print("This is my class")
#creating a class
class Avi:
    age = 19
    fullName = "Avishkar Pandey"
    email = "avishkarpandey@gmail.com"
    def pocketmoney(this,amount):
        print("My pocketmoney is",amount)
#create class object
avi:Avi = Avi()
print(avi.fullName)
print(avi.age)
print(avi.email)
avi.pocketmoney(12000)
-----------------------------------
-----------------------------------
Different types file 
Numpy--> create dataset
Pandas-->represent dataset(changes)/manipulate dataset
Matplotlib-->show in grapy
------------------------------------------
NUMPY IN PYTHON
NumPy is a library for the Python programming language, adding support for large, multi-dimensional arrays.
import numpy as np
#create numpy array to store 
#friend name edit 
myFriends = np.array(["avi       ","jai     ","harshit          ","divyansh        "])
print(myFriends)
print(type(myFriends))
#printitng truough  numpy array
print("normal array")
for i in myFriends:
    print(i)
#updating a numpy array
print("updated array")
myFriends[0] = "avi pandey"
myFriends[1] = "jai chauhan"
myFriends[2] = "harshit dhingra"
myFriends[3] = "divyansh tyagi"
for i in myFriends:
    print(i)
#sort a numpy  array
print("sorted arrya")
myFriends = np.sort(myFriends)
for i in myFriends:
    print(i)
#reverse sort of numpy array methord 1
print("reversed array methord 1")
myFriends =  np.sort(myFriends)[::-1]
for i in myFriends:
    print(i)
#reverse sort of numpy array methord 2
print("reversed array methord 2")
myFriends =  np.flip(myFriends)
for i in myFriends:
    print(i)
#reverse sort of numpy array methord 3
print("reversed array methord 3")
y = 3
while y>=0:
    print(myFriends[y])
    y = y - 1
--------------------------------------------------------------------------
#Types of Graph
#show data in graph-line(x,y), pie(x), bar(x,y), scatters(x,y)

#Making a line graph

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
years = np.array([2021, 2022, 2023, 2024])
grades = np.array([61, 65, 64, 74])

#Repersenting a line graph
plt.plot(years, grades, marker = 'o')

#to add title to the graph
plt.title("Academic Growth")

#set the name for x, y axis
plt.xlabel("Passing Years")
plt.ylabel("Student Marks")
plt.show()
--------------------------------------------------------
#Making a Pie graph

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
trendingLangName = np.array(["Python", "Javascript", "Java", "C@"])
trendinglang = np.array([45, 30, 20, 5])
plt.title("Trending Language Marketplace")
plt.pie(trendinglang)

#for giving scale to the graph
plt.legend(trendingLangName)
plt.show()
-----------------------------------------------
#working more on numpy 
import numpy  as np
import pandas as pd
a = np.arange(50)
print(a.min()) # shows the min value
print(a.max()) # show the max value 
print(a.mean()) #shows the mean of the array
print(a.shape) #show the dimenssion
mydata = a.reshape(5,10) # 5 is no. of rows and 10 is no. of col 
print(mydata) 
print(a)
------------------------------------------------------------------
ARRAY SLICING
# Array slcing
import numpy  as np
import pandas as pd
a = np.arange(50)
print(a[:])
print(a[4:8]) # 4 is start index and 8 is end index
b = np.array([5,6,3, 2, 1, 9, 10, 4, 7, 8])
print(b[8:2]) #this will not print any value
# negative indexing 
# the last index becomes the index value with -1.
print(b[:-5])
--------------------------------------------
#Working with pandas
Pandas will represent the dataset in dataframes
import numpy  as np
import pandas as pd
a = np.arange(50)
myDataFrame = pd.DataFrame(data = np.arange(0,50).reshape(5,10))
print(myDataFrame) #print arrya with index value
print( myDataFrame.head(1)) #print the  first() row of the array
print( myDataFrame.tail(2))  #print the last() row of the array
print( myDataFrame.loc[[2,3,4,5]])  #print the rows which are selected 

